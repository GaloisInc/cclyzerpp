[<<main-context>>, nil]	*heap_alloc@fun1[i8* %call]	*heap_alloc@fun1[i8* %call]
[<<main-context>>, nil]	*heap_alloc@fun1[i8* %call]	*heap_alloc@fun1[i8* %call][0]
[<<main-context>>, nil]	*heap_alloc@fun1[i8* %call][0]	*heap_alloc@fun1[i8* %call]
[<<main-context>>, nil]	*heap_alloc@fun1[i8* %call][0]	*heap_alloc@fun1[i8* %call][0]
[<<main-context>>, nil]	*heap_alloc@fun2[i8* %call]	*heap_alloc@fun2[i8* %call]
[<<main-context>>, nil]	*heap_alloc@fun2[i8* %call]	*heap_alloc@fun2[i8* %call][0]
[<<main-context>>, nil]	*heap_alloc@fun2[i8* %call][0]	*heap_alloc@fun2[i8* %call]
[<<main-context>>, nil]	*heap_alloc@fun2[i8* %call][0]	*heap_alloc@fun2[i8* %call][0]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %a]	*stack_alloc@main[%struct.obj** %a]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %a]	*stack_alloc@main[%struct.obj** %a][0]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %a][0]	*stack_alloc@main[%struct.obj** %a]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %a][0]	*stack_alloc@main[%struct.obj** %a][0]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %b]	*stack_alloc@main[%struct.obj** %b]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %b]	*stack_alloc@main[%struct.obj** %b][0]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %b][0]	*stack_alloc@main[%struct.obj** %b]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %b][0]	*stack_alloc@main[%struct.obj** %b][0]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %c]	*stack_alloc@main[%struct.obj** %c]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %c]	*stack_alloc@main[%struct.obj** %c][0]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %c][0]	*stack_alloc@main[%struct.obj** %c]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %c][0]	*stack_alloc@main[%struct.obj** %c][0]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %d]	*stack_alloc@main[%struct.obj** %d]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %d]	*stack_alloc@main[%struct.obj** %d][0]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %d][0]	*stack_alloc@main[%struct.obj** %d]
[<<main-context>>, nil]	*stack_alloc@main[%struct.obj** %d][0]	*stack_alloc@main[%struct.obj** %d][0]
[<<main-context>>, nil]	*stack_alloc@main[i32* %retval]	*stack_alloc@main[i32* %retval]
[<<main-context>>, nil]	*typed_heap_alloc@fun1[%struct.obj* %call]	*typed_heap_alloc@fun1[%struct.obj* %call]
[<<main-context>>, nil]	*typed_heap_alloc@fun1[%struct.obj* %call]	*typed_heap_alloc@fun1[%struct.obj* %call][0]
[<<main-context>>, nil]	*typed_heap_alloc@fun1[%struct.obj* %call]	*typed_heap_alloc@fun1[%struct.obj* %call][0].?/0
[<<main-context>>, nil]	*typed_heap_alloc@fun1[%struct.obj* %call][0]	*typed_heap_alloc@fun1[%struct.obj* %call]
[<<main-context>>, nil]	*typed_heap_alloc@fun1[%struct.obj* %call][0]	*typed_heap_alloc@fun1[%struct.obj* %call][0]
[<<main-context>>, nil]	*typed_heap_alloc@fun1[%struct.obj* %call][0]	*typed_heap_alloc@fun1[%struct.obj* %call][0].?/0
[<<main-context>>, nil]	*typed_heap_alloc@fun1[%struct.obj* %call][0].?/0	*typed_heap_alloc@fun1[%struct.obj* %call]
[<<main-context>>, nil]	*typed_heap_alloc@fun1[%struct.obj* %call][0].?/0	*typed_heap_alloc@fun1[%struct.obj* %call][0]
[<<main-context>>, nil]	*typed_heap_alloc@fun1[%struct.obj* %call][0].?/0	*typed_heap_alloc@fun1[%struct.obj* %call][0].?/0
[<<main-context>>, nil]	*typed_heap_alloc@fun2[%struct.obj* %call]	*typed_heap_alloc@fun2[%struct.obj* %call]
[<<main-context>>, nil]	*typed_heap_alloc@fun2[%struct.obj* %call]	*typed_heap_alloc@fun2[%struct.obj* %call][0]
[<<main-context>>, nil]	*typed_heap_alloc@fun2[%struct.obj* %call]	*typed_heap_alloc@fun2[%struct.obj* %call][0].?/0
[<<main-context>>, nil]	*typed_heap_alloc@fun2[%struct.obj* %call][0]	*typed_heap_alloc@fun2[%struct.obj* %call]
[<<main-context>>, nil]	*typed_heap_alloc@fun2[%struct.obj* %call][0]	*typed_heap_alloc@fun2[%struct.obj* %call][0]
[<<main-context>>, nil]	*typed_heap_alloc@fun2[%struct.obj* %call][0]	*typed_heap_alloc@fun2[%struct.obj* %call][0].?/0
[<<main-context>>, nil]	*typed_heap_alloc@fun2[%struct.obj* %call][0].?/0	*typed_heap_alloc@fun2[%struct.obj* %call]
[<<main-context>>, nil]	*typed_heap_alloc@fun2[%struct.obj* %call][0].?/0	*typed_heap_alloc@fun2[%struct.obj* %call][0]
[<<main-context>>, nil]	*typed_heap_alloc@fun2[%struct.obj* %call][0].?/0	*typed_heap_alloc@fun2[%struct.obj* %call][0].?/0
[<points-to_malloc-context.c>:fun1:2, nil]	*stack_alloc@id[%struct.obj** %x.addr]	*stack_alloc@id[%struct.obj** %x.addr]
[<points-to_malloc-context.c>:fun1:2, nil]	*stack_alloc@id[%struct.obj** %x.addr]	*stack_alloc@id[%struct.obj** %x.addr][0]
[<points-to_malloc-context.c>:fun1:2, nil]	*stack_alloc@id[%struct.obj** %x.addr][0]	*stack_alloc@id[%struct.obj** %x.addr]
[<points-to_malloc-context.c>:fun1:2, nil]	*stack_alloc@id[%struct.obj** %x.addr][0]	*stack_alloc@id[%struct.obj** %x.addr][0]
[<points-to_malloc-context.c>:fun2:2, nil]	*stack_alloc@id[%struct.obj** %x.addr]	*stack_alloc@id[%struct.obj** %x.addr]
[<points-to_malloc-context.c>:fun2:2, nil]	*stack_alloc@id[%struct.obj** %x.addr]	*stack_alloc@id[%struct.obj** %x.addr][0]
[<points-to_malloc-context.c>:fun2:2, nil]	*stack_alloc@id[%struct.obj** %x.addr][0]	*stack_alloc@id[%struct.obj** %x.addr]
[<points-to_malloc-context.c>:fun2:2, nil]	*stack_alloc@id[%struct.obj** %x.addr][0]	*stack_alloc@id[%struct.obj** %x.addr][0]
[<points-to_malloc-context.c>:fun3:0, nil]	*stack_alloc@id[%struct.obj** %x.addr]	*stack_alloc@id[%struct.obj** %x.addr]
[<points-to_malloc-context.c>:fun3:0, nil]	*stack_alloc@id[%struct.obj** %x.addr]	*stack_alloc@id[%struct.obj** %x.addr][0]
[<points-to_malloc-context.c>:fun3:0, nil]	*stack_alloc@id[%struct.obj** %x.addr][0]	*stack_alloc@id[%struct.obj** %x.addr]
[<points-to_malloc-context.c>:fun3:0, nil]	*stack_alloc@id[%struct.obj** %x.addr][0]	*stack_alloc@id[%struct.obj** %x.addr][0]
[<points-to_malloc-context.c>:fun4:0, nil]	*stack_alloc@id[%struct.obj** %x.addr]	*stack_alloc@id[%struct.obj** %x.addr]
[<points-to_malloc-context.c>:fun4:0, nil]	*stack_alloc@id[%struct.obj** %x.addr]	*stack_alloc@id[%struct.obj** %x.addr][0]
[<points-to_malloc-context.c>:fun4:0, nil]	*stack_alloc@id[%struct.obj** %x.addr][0]	*stack_alloc@id[%struct.obj** %x.addr]
[<points-to_malloc-context.c>:fun4:0, nil]	*stack_alloc@id[%struct.obj** %x.addr][0]	*stack_alloc@id[%struct.obj** %x.addr][0]
nil	*global_alloc@fun1	*global_alloc@fun1
nil	*global_alloc@fun2	*global_alloc@fun2
nil	*global_alloc@fun3	*global_alloc@fun3
nil	*global_alloc@fun4	*global_alloc@fun4
nil	*global_alloc@global_obj	*global_alloc@global_obj
nil	*global_alloc@global_obj	*global_alloc@global_obj[0]
nil	*global_alloc@global_obj	*global_alloc@global_obj[0].?/0
nil	*global_alloc@global_obj[0]	*global_alloc@global_obj
nil	*global_alloc@global_obj[0]	*global_alloc@global_obj[0]
nil	*global_alloc@global_obj[0]	*global_alloc@global_obj[0].?/0
nil	*global_alloc@global_obj[0].?/0	*global_alloc@global_obj
nil	*global_alloc@global_obj[0].?/0	*global_alloc@global_obj[0]
nil	*global_alloc@global_obj[0].?/0	*global_alloc@global_obj[0].?/0
nil	*global_alloc@id	*global_alloc@id
nil	*global_alloc@llvm.dbg.declare	*global_alloc@llvm.dbg.declare
nil	*global_alloc@malloc	*global_alloc@malloc
