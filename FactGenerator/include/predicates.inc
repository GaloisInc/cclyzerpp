// Default to empty definitions
#ifndef GROUP_BEGIN
#define GROUP_BEGIN(group)
#endif
#ifndef GROUP_END
#define GROUP_BEGIN(group)
#endif
// TODO(#42): Remove fname, derive from group + name
#ifndef PREDICATE
#define PREDICATE(group, name, fname)
#endif
// The goal of the above TODO is to move most or all of the below declarations
// from using PREDICATE to PREDICATE2.
#define PREDICATE2(group, name) PREDICATE(group, name, group ## _ ## name)

GROUP_BEGIN(block)
PREDICATE2(block, predecessor)
GROUP_END(block)

GROUP_BEGIN(global_var)
PREDICATE(global_var, id, global_var)
PREDICATE2(global_var, name)
PREDICATE2(global_var, demangled_name)
PREDICATE2(global_var, type)
PREDICATE2(global_var, initializer)
PREDICATE2(global_var, section)
PREDICATE2(global_var, aligned_to)
PREDICATE2(global_var, flag)
PREDICATE2(global_var, linkage)
PREDICATE2(global_var, visibility)
PREDICATE2(global_var, threadlocal_mode)
GROUP_END(global_var)

GROUP_BEGIN(alias)
PREDICATE(alias, id, alias)
PREDICATE2(alias, name)
PREDICATE2(alias, type)
PREDICATE(alias, linkage, alias_linkage_type)
PREDICATE2(alias, visibility)
PREDICATE2(alias, aliasee)
GROUP_END(alias)

GROUP_BEGIN(func)
PREDICATE(func, id_defn, func)
PREDICATE(func, id_decl, func_decl)
PREDICATE2(func, unnamed_addr)
PREDICATE(func, linkage, func_linkage_type)
PREDICATE2(func, visibility)
PREDICATE(func, calling_conv, func_calling_convention)
PREDICATE2(func, section)
PREDICATE2(func, alignment)
PREDICATE(func, fn_attr, func_attr)
PREDICATE2(func, gc)
PREDICATE2(func, pers_fn)
PREDICATE2(func, name)
PREDICATE(func, type, func_ty)
PREDICATE2(func, signature)
PREDICATE2(func, param)
PREDICATE(func, ret_attr, func_return_attr)
PREDICATE2(func, param_attr)
GROUP_END(function)

GROUP_BEGIN(instr)
PREDICATE(instr, to, instr_assigns_to)
PREDICATE(instr, flag, instr_flag)
PREDICATE(instr, next, next_instr)
PREDICATE(instr, bb_entry, _instr_bb_entry)
PREDICATE(instr, func, instr_func)
PREDICATE(instr, pos, instr_pos)
PREDICATE(instr, unreachable, unreachable_instr)
GROUP_END(instr)

GROUP_BEGIN(add)
PREDICATE(add, instr, add_instr)
PREDICATE(add, first_operand, add_instr_first_operand)
PREDICATE(add, second_operand, add_instr_second_operand)
GROUP_END(add)

GROUP_BEGIN(fadd)
PREDICATE(fadd, instr, fadd_instr)
PREDICATE(fadd, first_operand, fadd_instr_first_operand)
PREDICATE(fadd, second_operand, fadd_instr_second_operand)
GROUP_END(fadd)

GROUP_BEGIN(sub)
PREDICATE(sub, instr, sub_instr)
PREDICATE(sub, first_operand, sub_instr_first_operand)
PREDICATE(sub, second_operand, sub_instr_second_operand)
GROUP_END(sub)

GROUP_BEGIN(fsub)
PREDICATE(fsub, instr, fsub_instr)
PREDICATE(fsub, first_operand, fsub_instr_first_operand)
PREDICATE(fsub, second_operand, fsub_instr_second_operand)
GROUP_END(fsub)

GROUP_BEGIN(mul)
PREDICATE(mul, instr, mul_instr)
PREDICATE(mul, first_operand, mul_instr_first_operand)
PREDICATE(mul, second_operand, mul_instr_second_operand)
GROUP_END(mul)

GROUP_BEGIN(fmul)
PREDICATE(fmul, instr, fmul_instr)
PREDICATE(fmul, first_operand, fmul_instr_first_operand)
PREDICATE(fmul, second_operand, fmul_instr_second_operand)
GROUP_END(fmul)

GROUP_BEGIN(udiv)
PREDICATE(udiv, instr, udiv_instr)
PREDICATE(udiv, first_operand, udiv_instr_first_operand)
PREDICATE(udiv, second_operand, udiv_instr_second_operand)
GROUP_END(udiv)

GROUP_BEGIN(fdiv)
PREDICATE(fdiv, instr, fdiv_instr)
PREDICATE(fdiv, first_operand, fdiv_instr_first_operand)
PREDICATE(fdiv, second_operand, fdiv_instr_second_operand)
GROUP_END(fdiv)

GROUP_BEGIN(sdiv)
PREDICATE(sdiv, instr, sdiv_instr)
PREDICATE(sdiv, first_operand, sdiv_instr_first_operand)
PREDICATE(sdiv, second_operand, sdiv_instr_second_operand)
GROUP_END(sdiv)

GROUP_BEGIN(urem)
PREDICATE(urem, instr, urem_instr)
PREDICATE(urem, first_operand, urem_instr_first_operand)
PREDICATE(urem, second_operand, urem_instr_second_operand)
GROUP_END(urem)

GROUP_BEGIN(srem)
PREDICATE(srem, instr, srem_instr)
PREDICATE(srem, first_operand, srem_instr_first_operand)
PREDICATE(srem, second_operand, srem_instr_second_operand)
GROUP_END(srem)

GROUP_BEGIN(frem)
PREDICATE(frem, instr, frem_instr)
PREDICATE(frem, first_operand, frem_instr_first_operand)
PREDICATE(frem, second_operand, frem_instr_second_operand)
GROUP_END(frem)

// Bitwise Binary Instrs

GROUP_BEGIN(shl)
PREDICATE(shl, instr, shl_instr)
PREDICATE(shl, first_operand, shl_instr_first_operand)
PREDICATE(shl, second_operand, shl_instr_second_operand)
GROUP_END(shl)

GROUP_BEGIN(lshr)
PREDICATE(lshr, instr, lshr_instr)
PREDICATE(lshr, first_operand, lshr_instr_first_operand)
PREDICATE(lshr, second_operand, lshr_instr_second_operand)
GROUP_END(lshr)

GROUP_BEGIN(ashr)
PREDICATE(ashr, instr, ashr_instr)
PREDICATE(ashr, first_operand, ashr_instr_first_operand)
PREDICATE(ashr, second_operand, ashr_instr_second_operand)
GROUP_END(ashr)

GROUP_BEGIN(and_)
PREDICATE(and_, instr, and_instr)
PREDICATE(and_, first_operand, and_instr_first_operand)
PREDICATE(and_, second_operand, and_instr_second_operand)
GROUP_END(and_)

GROUP_BEGIN(or_)
PREDICATE(or_, instr, or_instr)
PREDICATE(or_, first_operand, or_instr_first_operand)
PREDICATE(or_, second_operand, or_instr_second_operand)
GROUP_END(or_)

GROUP_BEGIN(xor_)
PREDICATE(xor_, instr, xor_instr)
PREDICATE(xor_, first_operand, xor_instr_first_operand)
PREDICATE(xor_, second_operand, xor_instr_second_operand)
GROUP_END(xor_)

// Terminator Instrs

GROUP_BEGIN(ret)
PREDICATE(ret, instr, ret_instr)
PREDICATE(ret, instr_void, void_ret_instr)
PREDICATE(ret, operand, ret_instr_value)
GROUP_END(ret)

GROUP_BEGIN(br)
PREDICATE(br, instr, br_instr)
PREDICATE(br, instr_cond, br_cond_instr)
PREDICATE(br, condition, br_cond_instr_condition)
PREDICATE(br, cond_iftrue, br_cond_instr_iftrue_label)
PREDICATE(br, cond_iffalse, br_cond_instr_iffalse_label)
PREDICATE(br, instr_uncond, br_uncond_instr)
PREDICATE(br, uncond_dest, br_uncond_instr_dest_label)
GROUP_END(br)

GROUP_BEGIN(switch_)
PREDICATE(switch_, instr, switch_instr)
PREDICATE(switch_, operand, switch_instr_operand)
PREDICATE(switch_, default_label, switch_instr_default_label)
PREDICATE(switch_, case_value, _switch_instr_case_value)
PREDICATE(switch_, case_label, _switch_instr_case_label)
PREDICATE(switch_, ncases, switch_instr_ncases)
GROUP_END(switch_)

GROUP_BEGIN(indirectbr)
PREDICATE(indirectbr, instr, indirectbr_instr)
PREDICATE(indirectbr, address, indirectbr_instr_address)
PREDICATE(indirectbr, label, indirectbr_instr_label)
PREDICATE(indirectbr, nlabels, indirectbr_instr_nlabels)
GROUP_END(indirectbr)

GROUP_BEGIN(resume)
PREDICATE(resume, instr, resume_instr)
PREDICATE(resume, operand, resume_instr_operand)
GROUP_END(resume)

GROUP_BEGIN(invoke)
PREDICATE(invoke, instr, invoke_instr)
PREDICATE(invoke, instr_direct, direct_invoke_instr)
PREDICATE(invoke, instr_indirect, indirect_invoke_instr)
PREDICATE(invoke, function, invoke_instr_fn_operand)
PREDICATE(invoke, arg, invoke_instr_arg)
PREDICATE(invoke, calling_conv, invoke_instr_with_calling_convention)
PREDICATE(invoke, ret_attr, invoke_instr_with_return_attr)
PREDICATE(invoke, param_attr, invoke_instr_with_param_attr)
PREDICATE(invoke, fn_attr, invoke_instr_with_fn_attr)
PREDICATE(invoke, normal_label, invoke_instr_normal_label)
PREDICATE(invoke, exc_label, invoke_instr_exception_label)
GROUP_END(invoke)

// Vector Operations

GROUP_BEGIN(extract_element)
PREDICATE(extract_element, instr, extractelement_instr)
PREDICATE(extract_element, base, extractelement_instr_base)
PREDICATE(extract_element, index, extractelement_instr_index)
GROUP_END(extract_element)

GROUP_BEGIN(insert_element)
PREDICATE(insert_element, instr, insertelement_instr)
PREDICATE(insert_element, base, insertelement_instr_base)
PREDICATE(insert_element, index, insertelement_instr_index)
PREDICATE(insert_element, value, insertelement_instr_value)
GROUP_END(insert_element)

GROUP_BEGIN(shuffle_vector)
PREDICATE(shuffle_vector, instr, shufflevector_instr)
PREDICATE(shuffle_vector, first_vector, shufflevector_instr_first_vector)
PREDICATE(shuffle_vector, second_vector, shufflevector_instr_second_vector)
PREDICATE(shuffle_vector, mask, shufflevector_instr_mask)
GROUP_END(shuffle_vector)

// Aggregate Operations

GROUP_BEGIN(extract_value)
PREDICATE(extract_value, instr, extractvalue_instr)
PREDICATE(extract_value, base, extractvalue_instr_base)
PREDICATE(extract_value, index, extractvalue_instr_index)
PREDICATE(extract_value, nindices, extractvalue_instr_nindices)
GROUP_END(extract_value)

GROUP_BEGIN(insert_value)
PREDICATE(insert_value, instr, insertvalue_instr)
PREDICATE(insert_value, base, insertvalue_instr_base)
PREDICATE(insert_value, value, insertvalue_instr_value)
PREDICATE(insert_value, index, insertvalue_instr_index)
PREDICATE(insert_value, nindices, insertvalue_instr_nindices)
GROUP_END(insert_value)

// Memory Operations

GROUP_BEGIN(alloca)
PREDICATE(alloca, instr, alloca_instr)
PREDICATE(alloca, size, alloca_instr_size)
PREDICATE(alloca, alignment, alloca_instr_alignment)
PREDICATE(alloca, type, alloca_instr_type)
GROUP_END(alloca)

GROUP_BEGIN(load)
PREDICATE(load, instr, load_instr)
PREDICATE(load, alignment, load_instr_alignment)
PREDICATE(load, ordering, load_instr_ordering)
PREDICATE(load, address, load_instr_address)
PREDICATE(load, isvolatile, load_instr_is_volatile)
GROUP_END(load)

GROUP_BEGIN(store)
PREDICATE(store, instr, store_instr)
PREDICATE(store, alignment, store_instr_alignment)
PREDICATE(store, ordering, store_instr_ordering)
PREDICATE(store, value, store_instr_value)
PREDICATE(store, address, store_instr_address)
PREDICATE(store, isvolatile, store_instr_is_volatile)
GROUP_END(store)

GROUP_BEGIN(fence)
PREDICATE(fence, instr, fence_instr)
PREDICATE(fence, ordering, fence_instr_ordering)
GROUP_END(fence)

GROUP_BEGIN(atomicrmw)
PREDICATE(atomicrmw, instr, atomicrmw_instr)
PREDICATE(atomicrmw, ordering, atomicrmw_instr_ordering)
PREDICATE(atomicrmw, operation, atomicrmw_instr_operation)
PREDICATE(atomicrmw, address, atomicrmw_instr_address)
PREDICATE(atomicrmw, value, atomicrmw_instr_value)
PREDICATE(atomicrmw, isvolatile, atomicrmw_instr_is_volatile)
GROUP_END(atomicrmw)

GROUP_BEGIN(cmpxchg)
PREDICATE(cmpxchg, instr, cmpxchg_instr)
PREDICATE(cmpxchg, ordering, cmpxchg_instr_ordering)
PREDICATE(cmpxchg, address, cmpxchg_instr_address)
PREDICATE(cmpxchg, cmp_value, cmpxchg_instr_cmp_value)
PREDICATE(cmpxchg, new_value, cmpxchg_instr_new_value)
PREDICATE(cmpxchg, type, cmpxchg_instr_type)
PREDICATE(cmpxchg, isvolatile, cmpxchg_instr_is_volatile)
GROUP_END(cmpxchg)

GROUP_BEGIN(gep)
PREDICATE(gep, instr, getelementptr_instr)
PREDICATE(gep, base, getelementptr_instr_base)
PREDICATE(gep, index, getelementptr_instr_index)
PREDICATE(gep, nindices, getelementptr_instr_nindices)
PREDICATE(gep, inbounds, getelementptr_instr_is_inbounds)
GROUP_END(gep)

// Conversion Operations

GROUP_BEGIN(trunc)
PREDICATE(trunc, instr, trunc_instr)
PREDICATE(trunc, from_operand, trunc_instr_from_operand)
PREDICATE(trunc, to_type, trunc_instr_to_type)
GROUP_END(trunc)

GROUP_BEGIN(zext)
PREDICATE(zext, instr, zext_instr)
PREDICATE(zext, from_operand, zext_instr_from_operand)
PREDICATE(zext, to_type, zext_instr_to_type)
GROUP_END(zext)

GROUP_BEGIN(sext)
PREDICATE(sext, instr, sext_instr)
PREDICATE(sext, from_operand, sext_instr_from_operand)
PREDICATE(sext, to_type, sext_instr_to_type)
GROUP_END(sext)

GROUP_BEGIN(fptrunc)
PREDICATE(fptrunc, instr, fptrunc_instr)
PREDICATE(fptrunc, from_operand, fptrunc_instr_from_operand)
PREDICATE(fptrunc, to_type, fptrunc_instr_to_type)
GROUP_END(fptrunc)

GROUP_BEGIN(fpext)
PREDICATE(fpext, instr, fpext_instr)
PREDICATE(fpext, from_operand, fpext_instr_from_operand)
PREDICATE(fpext, to_type, fpext_instr_to_type)
GROUP_END(fpext)

GROUP_BEGIN(fptoui)
PREDICATE(fptoui, instr, fptoui_instr)
PREDICATE(fptoui, from_operand, fptoui_instr_from_operand)
PREDICATE(fptoui, to_type, fptoui_instr_to_type)
GROUP_END(fptoui)

GROUP_BEGIN(fptosi)
PREDICATE(fptosi, instr, fptosi_instr)
PREDICATE(fptosi, from_operand, fptosi_instr_from_operand)
PREDICATE(fptosi, to_type, fptosi_instr_to_type)
GROUP_END(fptosi)

GROUP_BEGIN(uitofp)
PREDICATE(uitofp, instr, uitofp_instr)
PREDICATE(uitofp, from_operand, uitofp_instr_from_operand)
PREDICATE(uitofp, to_type, uitofp_instr_to_type)
GROUP_END(uitofp)

GROUP_BEGIN(sitofp)
PREDICATE(sitofp, instr, sitofp_instr)
PREDICATE(sitofp, from_operand, sitofp_instr_from_operand)
PREDICATE(sitofp, to_type, sitofp_instr_to_type)
GROUP_END(sitofp)

GROUP_BEGIN(ptrtoint)
PREDICATE(ptrtoint, instr, ptrtoint_instr)
PREDICATE(ptrtoint, from_operand, ptrtoint_instr_from_operand)
PREDICATE(ptrtoint, to_type, ptrtoint_instr_to_type)
GROUP_END(ptrtoint)

GROUP_BEGIN(inttoptr)
PREDICATE(inttoptr, instr, inttoptr_instr)
PREDICATE(inttoptr, from_operand, inttoptr_instr_from_operand)
PREDICATE(inttoptr, to_type, inttoptr_instr_to_type)
GROUP_END(inttoptr)

GROUP_BEGIN(bitcast)
PREDICATE(bitcast, instr, bitcast_instr)
PREDICATE(bitcast, from_operand, bitcast_instr_from_operand)
PREDICATE(bitcast, to_type, bitcast_instr_to_type)
GROUP_END(bitcast)

// Other Operations

GROUP_BEGIN(icmp)
PREDICATE(icmp, instr, icmp_instr)
PREDICATE(icmp, condition, icmp_instr_condition)
PREDICATE(icmp, first_operand, icmp_instr_first_operand)
PREDICATE(icmp, second_operand, icmp_instr_second_operand)
GROUP_END(icmp)

GROUP_BEGIN(fcmp)
PREDICATE(fcmp, instr, fcmp_instr)
PREDICATE(fcmp, condition, fcmp_instr_condition)
PREDICATE(fcmp, first_operand, fcmp_instr_first_operand)
PREDICATE(fcmp, second_operand, fcmp_instr_second_operand)
GROUP_END(fcmp)

GROUP_BEGIN(phi)
PREDICATE(phi, instr, phi_instr)
PREDICATE(phi, type, phi_instr_type)
PREDICATE(phi, pair_value, _phi_instr_pair_value)
PREDICATE(phi, pair_label, _phi_instr_pair_label)
PREDICATE(phi, npairs, phi_instr_npairs)
GROUP_END(phi)

GROUP_BEGIN(select)
PREDICATE(select, instr, select_instr)
PREDICATE(select, condition, select_instr_condition)
PREDICATE(select, first_operand, select_instr_first_operand)
PREDICATE(select, second_operand, select_instr_second_operand)
GROUP_END(select)

GROUP_BEGIN(va_arg)
PREDICATE(va_arg, instr, va_arg_instr)
PREDICATE(va_arg, va_list, va_arg_instr_va_list)
PREDICATE(va_arg, type, va_arg_instr_type)
GROUP_END(va_arg)

GROUP_BEGIN(call)
PREDICATE(call, instr, call_instr)
PREDICATE(call, instr_direct, direct_call_instr)
PREDICATE(call, instr_indirect, indirect_call_instr)
PREDICATE(call, function, call_instr_fn_operand)
PREDICATE(call, arg, call_instr_arg)
PREDICATE(call, calling_conv, call_instr_with_calling_convention)
PREDICATE(call, ret_attr, call_instr_with_return_attr)
PREDICATE(call, param_attr, call_instr_with_param_attr)
PREDICATE(call, fn_attr, call_instr_with_fn_attr)
PREDICATE(call, tail, call_instr_is_tail_opt)
GROUP_END(call)

GROUP_BEGIN(landingpad)
PREDICATE(landingpad, instr, landingpad_instr)
PREDICATE(landingpad, type, landingpad_instr_type)
PREDICATE(landingpad, catch_clause, _landingpad_instr_catch_clause)
PREDICATE(landingpad, filter_clause, _landingpad_instr_filter_clause)
PREDICATE(landingpad, nclauses, landingpad_instr_nclauses)
PREDICATE(landingpad, cleanup, landingpad_instr_is_cleanup)
GROUP_END(landingpad)

// Types

GROUP_BEGIN(primitive_type)
PREDICATE(primitive_type, id, primitive_type)
GROUP_END(primitive_type)

GROUP_BEGIN(integer_type)
PREDICATE(integer_type, id, integer_type)
GROUP_END(integer_type)

GROUP_BEGIN(fp_type)
PREDICATE(fp_type, id, fp_type)
GROUP_END(fp_type)

GROUP_BEGIN(type)
PREDICATE(type, alloc_size, type_has_size)
PREDICATE(type, store_size, type_has_unpadded_size)
GROUP_END(type)

GROUP_BEGIN(func_type)
PREDICATE(func_type, id, func_type)
PREDICATE(func_type, varargs, func_type_has_varargs)
PREDICATE(func_type, return_type, func_type_return)
PREDICATE(func_type, param_type, func_type_param)
PREDICATE(func_type, nparams, func_type_nparams)
GROUP_END(func_type)

GROUP_BEGIN(ptr_type)
PREDICATE(ptr_type, id, pointer_type)
PREDICATE(ptr_type, component_type, pointer_type_has_component)
PREDICATE(ptr_type, addr_space, pointer_type_has_addr_space)
GROUP_END(ptr_type)

GROUP_BEGIN(vector_type)
PREDICATE(vector_type, id, vector_type)
PREDICATE(vector_type, component_type, vector_type_has_component)
PREDICATE(vector_type, size, vector_type_has_size)
GROUP_END(vector_type)

GROUP_BEGIN(array_type)
PREDICATE(array_type, id, array_type)
PREDICATE(array_type, component_type, array_type_has_component)
PREDICATE(array_type, size, array_type_has_size)
GROUP_END(array_type)

GROUP_BEGIN(struct_type)
PREDICATE(struct_type, id, struct_type)
PREDICATE(struct_type, field_type, struct_type_field)
PREDICATE(struct_type, field_offset, struct_type_field_offset)
PREDICATE(struct_type, field_bit_offset, struct_type_field_bit_offset)
PREDICATE(struct_type, nfields, struct_type_nfields)
PREDICATE(struct_type, opaque, opaque_struct_type)
PREDICATE(struct_type, has_name, struct_type_has_name)
GROUP_END(struct_type)

// Variables and constants

GROUP_BEGIN(variable)
PREDICATE(variable, id, variable)
PREDICATE(variable, type, variable_has_type)
PREDICATE(variable, source_name, variable_has_debug_source_name)
PREDICATE(variable, pos, variable_has_debug_decl_pos)
PREDICATE(variable, in_func, _variable_in_func)
PREDICATE(variable, name, variable_has_name)
GROUP_END(variable)

GROUP_BEGIN(constant)
PREDICATE(constant, id, constant)
PREDICATE(constant, type, constant_has_type)
PREDICATE(constant, value, constant_has_value)
PREDICATE(constant, in_func, _constant_in_func)
PREDICATE(constant, expr, constant_expression)
PREDICATE(constant, hash, constant_hashes_to)
PREDICATE(constant, to_integer, constant_to_int)
GROUP_END(constant)

// Constant hierarchy

GROUP_BEGIN(integer_constant)
PREDICATE(integer_constant, id, integer_constant)
GROUP_END(integer_constant)

GROUP_BEGIN(fp_constant)
PREDICATE(fp_constant, id, fp_constant)
GROUP_END(fp_constant)

GROUP_BEGIN(nullptr_constant)
PREDICATE(nullptr_constant, id, nullptr_constant)
GROUP_END(nullptr_constant)

GROUP_BEGIN(func_constant)
PREDICATE(func_constant, id, func_constant)
PREDICATE(func_constant, name, func_constant_fn_name)
GROUP_END(func_constant)

GROUP_BEGIN(global_var_constant)
PREDICATE(global_var_constant, id, global_var_constant)
PREDICATE(global_var_constant, name, global_var_constant_name)
GROUP_END(global_var_constant)

GROUP_BEGIN(constant_array)
PREDICATE(constant_array, id, constant_array)
PREDICATE(constant_array, index, constant_array_index)
PREDICATE(constant_array, size, constant_array_has_size)
GROUP_END(constant_array)

GROUP_BEGIN(constant_struct)
PREDICATE(constant_struct, id, constant_struct)
PREDICATE(constant_struct, index, constant_struct_index)
PREDICATE(constant_struct, size, constant_struct_has_size)
GROUP_END(constant_struct)

GROUP_BEGIN(constant_vector)
PREDICATE(constant_vector, id, constant_vector)
PREDICATE(constant_vector, index, constant_vector_index)
PREDICATE(constant_vector, size, constant_vector_has_size)
GROUP_END(constant_vector)

GROUP_BEGIN(constant_expr)
PREDICATE(constant_expr, id, constant_expression)
GROUP_END(constant_expr)

GROUP_BEGIN(bitcast_constant_expr)
PREDICATE(bitcast_constant_expr, id, bitcast_constant_expression)
PREDICATE(bitcast_constant_expr, from_constant, bitcast_constant_expression_from)
GROUP_END(bitcast_constant_expr)

GROUP_BEGIN(inttoptr_constant_expr)
PREDICATE(inttoptr_constant_expr, id, inttoptr_constant_expression)
PREDICATE(inttoptr_constant_expr, from_int_constant, inttoptr_constant_expression_from)
GROUP_END(inttoptr_constant_expr)

GROUP_BEGIN(ptrtoint_constant_expr)
PREDICATE(ptrtoint_constant_expr, id, ptrtoint_constant_expression)
PREDICATE(ptrtoint_constant_expr, from_ptr_constant, ptrtoint_constant_expression_from)
GROUP_END(ptrtoint_constant_expr)

GROUP_BEGIN(gep_constant_expr)
PREDICATE(gep_constant_expr, id, getelementptr_constant_expression)
PREDICATE(gep_constant_expr, base, getelementptr_constant_expression_base)
PREDICATE(gep_constant_expr, index, getelementptr_constant_expression_index)
PREDICATE(gep_constant_expr, nindices, getelementptr_constant_expression_nindices)
GROUP_END(gep_constant_expr)

GROUP_BEGIN(undef_constant)
PREDICATE(undef_constant, id, undef_constant)
GROUP_END(undef_constant)

GROUP_BEGIN(poison_constant)
PREDICATE(poison_constant, id, poison_constant)
GROUP_END(poison_constant)

// Inline Assembly

GROUP_BEGIN(inline_asm)
PREDICATE(inline_asm, id, inline_asm)
PREDICATE(inline_asm, text, inline_asm_text)
PREDICATE(inline_asm, constraints, inline_asm_constraints)
GROUP_END(inline_asm)

// Function Attrs

GROUP_BEGIN(attr)
PREDICATE(attr, target_dependent, target_dependent_attr)
GROUP_END(attr)

// Signatures

GROUP_BEGIN(signature)
PREDICATE(signature, pts_none, pts_signature_none)
PREDICATE(signature, pts_return_alloc, pts_signature_return_alloc)
PREDICATE(signature, pts_return_alloc_once, pts_signature_return_alloc_once)
PREDICATE(signature, pts_return_aliases_arg, pts_signature_return_aliases_arg)
PREDICATE(signature, pts_return_aliases_arg_reachable, pts_signature_return_aliases_arg_reachable)
PREDICATE(signature, pts_return_points_to_global, pts_signature_return_points_to_global)
PREDICATE(signature, pts_return_aliases_global, pts_signature_return_aliases_global)
PREDICATE(signature, pts_return_aliases_global_reachable, pts_signature_return_aliases_global_reachable)
PREDICATE(signature, pts_arg_alloc, pts_signature_arg_alloc)
PREDICATE(signature, pts_arg_alloc_once, pts_signature_arg_alloc_once)
PREDICATE(signature, pts_arg_memcpy_arg, pts_signature_arg_memcpy_arg)
PREDICATE(signature, pts_arg_memcpy_arg_reachable, pts_signature_arg_memcpy_arg_reachable)
PREDICATE(signature, pts_arg_points_to_global, pts_signature_arg_points_to_global)
PREDICATE(signature, pts_arg_memcpy_global, pts_signature_arg_memcpy_global)
PREDICATE(signature, pts_arg_memcpy_global_reachable, pts_signature_arg_memcpy_global_reachable)
PREDICATE(signature, pts_global_memcpy_arg, pts_signature_global_memcpy_arg)
PREDICATE(signature, pts_global_memcpy_arg_reachable, pts_signature_global_memcpy_arg_reachable)
GROUP_END(signature)

// User options
GROUP_BEGIN(user)
PREDICATE(user, options, user_options)
GROUP_END(user)

#undef GROUP_BEGIN
#undef GROUP_END
#undef PREDICATE
