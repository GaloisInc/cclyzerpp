// http://llvm.org/docs/LangRef.html#call-instr
// keywords: instr

.type CallInstruction = Instruction
.decl call_instr(instr:CallInstruction)

instr(v) :- call_instr(v).

// Function operand: can be either a constant or a variable
.decl call_instr_fn_operand(instr:CallInstruction, op:Operand)

// Resolved func of call instr. Initially empty.
.decl call_instr_fn_target(instr:CallInstruction, func:FunctionDecl)

// Eligible for tail call optimizations
.decl call_instr_is_tail_opt(instr:CallInstruction)


// If none is specified, the call defaults to using C
// calling conventions.
.decl call_instr_with_calling_convention(instr:CallInstruction, cc:CallingConvention)
calling_convention(cc) :- call_instr_with_calling_convention(_, cc).


//---------------------------------------------------------------
// [Direct and Indirect Call Instructions]
//
// Call-instrs are divided into direct calls
// that provide a func name, and indirect calls
// through a func pointer variable.
//---------------------------------------------------------------

.decl direct_call_instr(instr:CallInstruction)
.decl indirect_call_instr(instr:CallInstruction)
.decl asm_call_instr(instr:CallInstruction)

direct_call_instr(Instr) :-
   call_instr_fn_operand(Instr, Constant),
   constant(Constant), !inline_asm(Constant).

indirect_call_instr(Instr) :-
   call_instr_fn_operand(Instr, Variable),
   variable(Variable).

asm_call_instr(Instr) :-
   call_instr_fn_operand(Instr, Constant),
   inline_asm(Constant).


//--------------------------------------------------
// Actual arguments and Parameter Attrs
//--------------------------------------------------

.decl call_instr_arg(instr:CallInstruction, i:ArgumentIndex, arg:Operand)
.decl call_instr_with_return_attr(instr:CallInstruction, attr:Attribute)
.decl call_instr_with_param_attr(instr:CallInstruction, i:ArgumentIndex, attr:Attribute)
.decl call_instr_with_fn_attr(instr:CallInstruction, attr:Attribute)

attr(Attr) :- call_instr_with_fn_attr(_, Attr).
attr(Attr) :- call_instr_with_return_attr(_, Attr).
attr(Attr) :- call_instr_with_param_attr(_, _, Attr).


//-----------------------------
// Signature (func type)
//-----------------------------

.decl call_instr_fn_type(instr:CallInstruction, type:Type)
.decl call_instr_return_type(instr:CallInstruction, type:Type)

call_instr_fn_type(Instr, FnType) :-
   call_instr_fn_operand(Instr, FnOp),
   operand_has_type(FnOp, PtrType),
   pointer_type_has_component(PtrType, FnType),
   func_type(FnType).

call_instr_return_type(Instr, Type) :-
   call_instr_fn_type(Instr, FnType),
   func_type_return(FnType, Type).


//------------------------------------------------------------------------------
// [Constraints]
//
//  (1) Only ‘zeroext‘, ‘signext‘, and ‘inreg‘ attrs
//      are valid for return values.
//  (2) The calling convention of the call must match the
//      calling convention of the target func.
//  (3) The type of the call instr is also the type of
//      the return value. Functions that return no value are
//      marked void.
//  (4) The func type shall be the signature of the pointer
//      to func value being invoked. The argument types must
//      match the types implied by this signature.
//  (5) All arguments must be of first class type.
//  (6) Only ‘noreturn‘, ‘nounwind‘, ‘readonly‘ and ‘readnone‘
//      attrs are valid as func attrs.
//------------------------------------------------------------------------------

schema_invalid_instr(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   call_instr(Instr),
   !call_instr_fn_operand(Instr, _).

schema_invalid_instr(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   call_instr(Instr),
   !call_instr_fn_type(Instr, _).

// attr compatibility
schema_invalid_instr(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   call_instr_with_return_attr(Instr, Attr),
   !parameter_attr__zeroext(Attr),
   !parameter_attr__signext(Attr),
   !parameter_attr__inreg(Attr),
   !parameter_attr__noalias(Attr),
   !parameter_attr__dereferenceable(Attr). // c1

schema_invalid_instr(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   call_instr_with_fn_attr(Instr, Attr),
   !func_fn_attr__noreturn(Attr),
   !func_fn_attr__nounwind(Attr),
   !func_fn_attr__readonly(Attr),
   !func_fn_attr__readnone(Attr),
   !func_fn_attr__cold(Attr),
   !func_fn_attr__returns_twice(Attr),
   !func_fn_attr__builtin(Attr),
   !target_dependent_attr(Attr). // c6


// cc compatibility
//
// TODO: this should be used to limit imprecision instead, and not be
// a constraint
//
// schema_invalid_instr(Instr, __FILE__, __LINE__) :-
//    schema_sanity(),
//    call_instr_fn_target(Instr, Func),
//    call_instr_with_calling_convention(Instr, CConv),
//    !func_calling_conv(Func, CConv). // c2

// Signature conformance
schema_invalid_instr(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   call_instr_arg(Instr, Index, _),
   call_instr_fn_type(Instr, FnType),
   !func_type_param(FnType, Index, _),
   !func_type_has_varargs(FnType).

schema_invalid_instr(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   call_instr(Instr),
   !call_instr_arg(Instr, Index, _),
   call_instr_fn_type(Instr, FnType),
   func_type_param(FnType, Index, _).

schema_invalid_instr(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   call_instr_arg(Instr, Index, Arg),
   call_instr_fn_type(Instr, FnType),
   func_type_param(FnType, Index, ParamType),
   !operand_has_type(Arg, ParamType). // c4


schema_invalid_instr(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   call_instr_return_type(Instr, Type),
   !void_type(Type),
   !instr_returns_type(Instr, Type). // c3

schema_invalid_instr(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   call_instr_return_type(Instr, Type),
   void_type(Type),
   instr_returns_type(Instr, _). // c3 vice versa

// only first class arguments allowed
schema_invalid_instr(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   call_instr_arg(Instr, _, Arg),
   !operand_is_firstclass(Arg). // c5
