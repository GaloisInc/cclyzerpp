// http://llvm.org/docs/LangRef.html#functions

//-----------------------------------------
// Function definitions and declarations
//-----------------------------------------

.type FunctionDecl <: symbol
.type Function = FunctionDecl

.decl function_decl(func:FunctionDecl)
.decl function(func:Function)

function_decl(Func) :- function(Func).

// !! Note: A function definition is encoded as a subtype of function
// declaration, that adds a body of instructions. !!

// For constraints
.decl schema_invalid_function(func:FunctionDecl, file:File, line:Line)


// TODO: how are varargs represented here?


//---------------------------------
// Mandatory name and type info
//---------------------------------

.decl function_has_type(func:FunctionDecl, type:FunctionType)
.decl function_has_name(func:FunctionDecl, name:FunctionName)

// Unmangled name with type signature
.decl function_has_signature(func:FunctionDecl, signature:symbol)

schema_invalid_function(Func, __FILE__, __LINE__) :-
   schema_sanity(),
   function_decl(Func),
   !function_has_type(Func, _).

schema_invalid_function(Func, __FILE__, __LINE__) :-
   schema_sanity(),
   function_decl(Func),
   !function_has_name(Func, _).

.decl schema_multiple_function_names(Func: FunctionDecl, file:File, line:Line)
schema_multiple_function_names(Func, __FILE__, __LINE__) :-
   schema_sanity(),
   function_decl(Func),
   function_has_name(Func,name1),
   function_has_name(Func,name2),
   name1!=name2.

//----------------------------------------
// Variables and Constants contained
//----------------------------------------

.decl constant_in_function(c:Constant, func:Function)
.decl variable_in_function(v:Variable, func:Function)


//-----------------------------------------------------------------
// Optional function attributes (common for both declarations and
// definitions)
//-----------------------------------------------------------------

.decl function_alignment(func:FunctionDecl, alignment:number)
.decl function_has_linkage_type(func:FunctionDecl, link:LinkageType)
.decl function_has_visibility(func:FunctionDecl, vis:Visibility)
.decl function_with_calling_convention(func:FunctionDecl, cc:CallingConvention)
.decl function_with_unnamed_addr(func:FunctionDecl)
.decl function_with_gc(func:FunctionDecl, collector:symbol)
.decl function_with_pers_fn(func:FunctionDecl, persfn:Constant)

calling_convention(cc) :- function_with_calling_convention(_, cc).
linkage_type(link) :- function_has_linkage_type(_, link).
visibility(vis) :- function_has_visibility(_, vis).

//-----------------------------------------------------------------
// Optional function attributes (only for definitions)
//-----------------------------------------------------------------

.decl function_in_section(func:Function, section:symbol)


//----------------------------------
// Function (Formal) Parameters
//----------------------------------

.decl function_nparams(func:Function, total:number)

function_nparams(Func, Total) :-
   function(Func),
   function_has_type(Func, Type),
   function_type_nparams(Type, Total).


.decl function_param(func:Function, index:ArgumentIndex, param:Variable)


//------------------------------------------------------------------------------
// [Parameter Attributes]
//
// The return type and each parameter of a function type may have
// a set of parameter attributes associated with them.
//
// Parameter attributes are used to communicate additional information
// about the result or parameters of a function.
//
// Parameter attributes are considered to be part of the function,
// not of the function type, so functions with different parameter
// attributes can have the same function type.
//
// Parameter attributes are simple keywords that follow the type specified.
// If multiple parameter attributes are needed, they are space separated.
//------------------------------------------------------------------------------

.decl function_with_attribute(func:FunctionDecl, attr:Attribute)
.decl function_with_return_attribute(func:FunctionDecl, attr:Attribute)
.decl function_with_param_attribute(func:FunctionDecl, index:ArgumentIndex, attr:Attribute)

attribute(Attr) :- function_with_attribute(_, Attr).
attribute(Attr) :- function_with_return_attribute(_, Attr).
attribute(Attr) :- function_with_param_attribute(_, _, Attr).

// Parameter is passed by value
.decl function_param_by_value(func:Function, index:number)

function_param_by_value(Func, Index) :-
   function_param(Func, Index, _),
   function_with_param_attribute(Func, Index, ByValueAttr),
   parameter_attribute__byval(ByValueAttr).


//------------------------------------------------------------------------------
// [Constraints]
//
// Number and types of parameters must match those declared
// in the function type.
//
// The return type must also be compatible for the function
// to be well-formed, but this is checked in ret-instruction
// logic.
//------------------------------------------------------------------------------

schema_invalid_function(Func, __FILE__, __LINE__) :-
   schema_sanity(),
   function_has_type(Func, Type),
   function_param(Func, Index, Param),
   function_type_param(Type, Index, ParamType),
   !variable_has_type(Param, ParamType).

schema_invalid_function(Func, __FILE__, __LINE__) :-
   schema_sanity(),
   function(Func),
   function_has_type(Func, Type),
   function_type_param(Type, Index, _),
   !function_param(Func, Index, _).

schema_invalid_function(Func, __FILE__, __LINE__) :-
   schema_sanity(),
   function_has_type(Func, Type),
   function_param(Func, Index, _),
   !function_type_param(Type, Index, _).
