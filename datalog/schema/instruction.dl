//------------------------------------
// Instruction (EDB) Entities
//------------------------------------

.type Instruction <: symbol
.decl instruction(instr:Instruction)

// For constraints
.decl schema_invalid_instruction(instr:Instruction, file:File, line:Line)


// Apart from the instructions with 'void' type,
// every instruction assigns its result to a variable.
.decl instruction_assigns_to(instr:Instruction, var:Variable)

// Auxiliary predicate that stores the instruction's return type
.decl instruction_returns_type(instr:Instruction, type:Type)

instruction_returns_type(Instr, Type) :-
   instruction_assigns_to(Instr, Var),
   variable_has_type(Var, Type).

// Terminator Instruction Subset
.decl terminator_instruction(instr:Instruction)


// Instruction Flags
.type Flag <: symbol
.decl flag(flag:Flag)
.decl instruction_has_flag(instr:Instruction, flag:Flag)

flag(Flag) :- instruction_has_flag(_, Flag).


// helpful in avoiding non-termination warnings
.decl next_instruction_index(instr:Instruction, index:number, next_index:number)

// Position of instruction on source code (if debug info is available)
.decl instruction_pos(instr:Instruction, line:LineNumber, column:ColumnNumber)


//------------------------------------
// Sequence of instructions
//------------------------------------

// The next instruction in the source file.
.decl next_instruction(instr:Instruction, next:Instruction)

// The func that contains the instruction
.decl instruction_in_func(instr:Instruction, func:Function)

schema_invalid_instruction(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   instruction(Instr),
   !instruction_in_func(Instr, _).
