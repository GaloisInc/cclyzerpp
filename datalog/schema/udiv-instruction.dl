// http://llvm.org/docs/LangRef.html#udiv-instruction
// keywords: arithmetic; binary; instruction

.type UDivInstruction = Instruction
.decl udiv_instruction(instr:UDivInstruction)

instruction(v) :- udiv_instruction(v).

.decl udiv_instruction_first_operand(instr:UDivInstruction, op:Operand)
.decl udiv_instruction_second_operand(instr:UDivInstruction, op:Operand)


//------------------------------------------------------------------------------
// [Constraints]
//
// 1) The two arguments to the ‘udiv‘ instruction must be:
//      (i)  integer or
//      (ii) vector of integer values.
//
// 2) Both arguments must have identical types.
//
// 3) The resulting value is the same type as its operands.
//------------------------------------------------------------------------------

schema_invalid_instruction(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   udiv_instruction(Instr),
   !udiv_instruction_first_operand(Instr, _).

schema_invalid_instruction(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   udiv_instruction(Instr),
   !udiv_instruction_second_operand(Instr, _).

schema_invalid_instruction(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   udiv_instruction(Instr),
   instruction_returns_type(Instr, Type),
   !integer_type(Type),
   !integer_vector_type(Type).

schema_invalid_instruction(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   instruction_returns_type(Instr, Type),
   udiv_instruction_first_operand(Instr, LeftOp),
   !operand_has_type(LeftOp, Type).

schema_invalid_instruction(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   instruction_returns_type(Instr, Type),
   udiv_instruction_second_operand(Instr, RightOp),
   !operand_has_type(RightOp, Type).
