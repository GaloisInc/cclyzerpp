// http://llvm.org/docs/LangRef.html#fadd-instruction
// keywords: arithmetic; binary; instruction

.type FAddInstruction = Instruction
.decl fadd_instruction(instr:FAddInstruction)

instruction(v) :- fadd_instruction(v).

.decl fadd_instruction_first_operand(instr:FAddInstruction, op:Operand)
.decl fadd_instruction_second_operand(instr:FAddInstruction, op:Operand)


//-------------------------------------------------------------------
// [Constraints]
//
// 1) The two arguments to the ‘fadd‘ instruction must be:
//      (i)  floating point or
//      (ii) vector of floating point values.
//
// 2) Both arguments must have identical types.
//
// 3) The resulting value is the same type as its operands.
//-------------------------------------------------------------------

schema_invalid_instruction(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   fadd_instruction(Instr),
   !fadd_instruction_first_operand(Instr, _).

schema_invalid_instruction(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   fadd_instruction(Instr),
   !fadd_instruction_second_operand(Instr, _).

schema_invalid_instruction(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   fadd_instruction(Instr),
   instruction_returns_type(Instr, Type),
   !fp_type(Type),
   !fp_vector_type(Type).

schema_invalid_instruction(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   instruction_returns_type(Instr, Type),
   fadd_instruction_first_operand(Instr, LeftOp),
   !operand_has_type(LeftOp, Type).

schema_invalid_instruction(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   instruction_returns_type(Instr, Type),
   fadd_instruction_second_operand(Instr, RightOp),
   !operand_has_type(RightOp, Type).
