// http://llvm.org/docs/LangRef.html#va-arg-instruction
// keywords: unary; instruction

.type VaArgInstruction = Instruction
.decl va_arg_instruction(instr:VaArgInstruction)

instruction(v) :- va_arg_instruction(v).

.decl va_arg_instruction_va_list(instr:VaArgInstruction, list:Operand)
.decl va_arg_instruction_type(instr:VaArgInstruction, type:Type)


//------------------------------------------------------------------------------
// [Constraints]
//
// The ‘va-arg‘ instruction takes:
//  (i)  a va_list* value, and
//  (ii) the type of the arguments,
//
// It returns:
//  (i) a value of the specified argument type.
//------------------------------------------------------------------------------

schema_invalid_instruction(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   va_arg_instruction(Instr),
   !va_arg_instruction_va_list(Instr, _).

schema_invalid_instruction(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   va_arg_instruction(Instr),
   !va_arg_instruction_type(Instr, _).

schema_invalid_instruction(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   va_arg_instruction(Instr),
   va_arg_instruction_va_list(Instr, List),
   operand_has_type(List, ListType),
   !pointer_type(ListType).

schema_invalid_instruction(Instr, __FILE__, __LINE__) :-
   schema_sanity(),
   va_arg_instruction(Instr),
   va_arg_instruction_type(Instr, Type),
   !instruction_returns_type(Instr, Type).
