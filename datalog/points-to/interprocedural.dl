//------------------------------------------------------------------------------
//  [Interprocedural Logic]
//------------------------------------------------------------------------------

.decl func_by_location(?alloc: GlobalAllocation, ?callee: FunctionDecl)
func_by_location(?alloc, ?callee) :-
  global_allocation_by_func(?callee, ?alloc).

.comp Callgraph {

  //----------------------------------------------------------------------------
  // "Input"/declared rules
  //
  // https://souffle-lang.github.io/components#input-rules
  //----------------------------------------------------------------------------

  .decl called_at_exit(func: FunctionDecl) inline
  .decl func_pointer_operand_points_to(?aCtx: Context, ?alloc: Allocation, ?ctx: Context, ?operand: Operand) inline

  .decl merge(?newCtx: Context, ?callerInstr: Instruction, ?callerCtx: Context)

  //----------------------------------------------------------------------------
  // "Output"/defined rules
  //
  // By convention, rules that begin with an underscore are internal
  // implementation details, and should not be accessed outside the component.
  //----------------------------------------------------------------------------

  // Reachability

  .decl reachable_context(?ctx: Context, ?func: FunctionDecl)
  .decl reachable_func(func: FunctionDecl)
  .decl reachable_instruction(instr: Instruction)

  reachable_context(?calleeCtx, ?callee) :-
     callgraph_edge(?calleeCtx, ?callee, _, _).

  reachable_func(?func) :-
    reachable_context(_, ?func).

  reachable_instruction(Instr) :-
    reachable_func(Func),
    instruction_in_func(Instr, Func).

  // TODO: transition from startup to main?

  reachable_context(?ctx, ?func) :-
    ! insensitive(),
    ( main_func(?func),
      main_context(?ctx)
    ; called_at_startup(?func),
      startup_context(?ctx)
    ; called_at_exit(?func),
      exit_context(?ctx)
    ).

  reachable_context(?ctx, ?func) :-
    insensitive(),
    empty_context(?ctx),
    ( main_func(?func)
    ; called_at_startup(?func)
    ; called_at_exit(?func)
    ).

  .decl reachable_store(?ctx: Context, ?toAddress: Operand, ?value: Operand)

  reachable_store(?ctx, ?toAddress, ?value) :-
    reachable_context(?ctx, ?instrFunc),
    instruction_in_func(?instr, ?instrFunc),
    store_instruction_value(?instr, ?value),
    store_instruction_address(?instr, ?toAddress).

  .decl reachable_load(?ctx: Context, ?toVar: Variable, ?fromAdress: Operand)

  reachable_load(?ctx, ?toVar, ?fromAddress) :-
    reachable_context(?ctx, ?instrFunc),
    instruction_in_func(?instr, ?instrFunc),
    load_instruction_address(?instr, ?fromAddress),
    instruction_assigns_to(?instr, ?toVar).

  // Callgraph

  .decl callgraph_edge(?calleeCtx: Context, ?callee: FunctionDecl, ?callerCtx: Context, ?callerInstr: Instruction)

  // Direct func calls

  .decl _callgraph_edge_interim_direct_call(?callee: FunctionDecl, ?callerCtx: Context, ?callerInstr: Instruction)

  _callgraph_edge_interim_direct_call(?callee, ?callerCtx, ?callerInstr)
   :-
     direct_call_instruction(?callerInstr),
     call_instruction_fn_target(?callerInstr, ?callee),
     instruction_in_func(?callerInstr, ?instrFunc),
     reachable_context(?callerCtx, ?instrFunc).

  callgraph_edge(?calleeCtx, ?callee, ?callerCtx, ?callerInstr)
   , context(?calleeCtx)
   :-
     _callgraph_edge_interim_direct_call(?callee, ?callerCtx, ?callerInstr),
     merge(?calleeCtx, ?callerInstr, ?callerCtx).

  .decl _callgraph_edge_interim_direct_invoke(?callee: FunctionDecl, ?callerCtx: Context, ?callerInstr: Instruction)

  _callgraph_edge_interim_direct_invoke(?callee, ?callerCtx, ?callerInstr)
   :-
     direct_call_instruction(?callerInstr),
     invoke_instruction_fn_target(?callerInstr, ?callee),
     instruction_in_func(?callerInstr, ?instrFunc),
     reachable_context(?callerCtx, ?instrFunc).

  callgraph_edge(?calleeCtx, ?callee, ?callerCtx, ?callerInstr)
   , context(?calleeCtx)
   :-
     _callgraph_edge_interim_direct_invoke(?callee, ?callerCtx, ?callerInstr),
     merge(?calleeCtx, ?callerInstr, ?callerCtx).


  // Indirect func calls (via func pointers)

  .decl _callgraph_edge_interim_indirect_call(?callee: FunctionDecl, ?callerCtx: Context, ?aCtx: Context, ?callerInstr: Instruction)

  _callgraph_edge_interim_indirect_call(?callee, ?callerCtx, ?aCtx, ?callerInstr)
   :-
     indirect_call_instruction(?callerInstr),
     call_instruction_fn_operand(?callerInstr, ?funcOp),
     func_pointer_operand_points_to(?aCtx, ?funcLoc, ?callerCtx, ?funcOp),
     func_by_location(?funcLoc, ?callee),
     func_ty(?callee, ?actualType),
     operand_has_type(?funcOp, ?funcOpType),
     pointer_type_has_component(?funcOpType, ?declaredType),
     type_compatible(?actualType, ?declaredType).

  callgraph_edge(?calleeCtx, ?callee, ?callerCtx, ?callerInstr)
   , context(?calleeCtx)
   :-
     _callgraph_edge_interim_indirect_call(?callee, ?callerCtx, ?aCtx, ?callerInstr),
     merge(?calleeCtx, ?callerInstr, ?callerCtx).

  .decl _callgraph_edge_interim_indirect_invoke(?callee: FunctionDecl, ?callerCtx: Context, ?aCtx: Context, ?callerInstr: Instruction)

  _callgraph_edge_interim_indirect_invoke(?callee, ?callerCtx, ?aCtx, ?callerInstr)
   :-
     invoke_instruction(?callerInstr),
     invoke_instruction_fn_operand(?callerInstr, ?funcOp),
     func_pointer_operand_points_to(?aCtx, ?funcLoc, ?callerCtx, ?funcOp),
     func_by_location(?funcLoc, ?callee),
     func_ty(?callee, ?actualType),
     operand_has_type(?funcOp, ?funcOpType),
     pointer_type_has_component(?funcOpType, ?declaredType),
     type_compatible(?actualType, ?declaredType).

  callgraph_edge(?calleeCtx, ?callee, ?callerCtx, ?callerInstr)
   , context(?calleeCtx)
   :-
     _callgraph_edge_interim_indirect_invoke(?callee, ?callerCtx, ?aCtx, ?callerInstr),
     merge(?calleeCtx, ?callerInstr, ?callerCtx).
}

//------------------------------------------------------------------------------
//  Interprocedural Assignments
//------------------------------------------------------------------------------

// Actual argument of func call

.decl actual_arg(?instr: Instruction, ?index: ArgumentIndex, ?argument: Operand)

actual_arg(?invokeInstr, ?index, ?argument) :-
  invoke_instruction_arg(?invokeInstr, ?index, ?argument).

actual_arg(?callInstr, ?index, ?argument) :-
  call_instruction_arg(?callInstr, ?index, ?argument).

.decl func_param_not_by_value(?callee: Function, ?index: ArgumentIndex, ?param: Variable)

func_param_not_by_value(?callee, ?index, ?param) :-
  func_param(?callee, ?index, ?param),
  !func_param_by_value(?callee, ?index).

.decl func_returns_value(?retValue: Operand, ?inFunction: Function)

func_returns_value(?retValue, ?inFunction) :-
  ret_instruction_value(?retInsn, ?retValue),
  instruction_in_func(?retInsn, ?inFunction).

.comp InterpAssignment {

  //----------------------------------------------------------------------------
  // "Input"/declared rules
  //
  // https://souffle-lang.github.io/components#input-rules
  //----------------------------------------------------------------------------

  .decl callgraph_edge(?calleeCtx: Context, ?callee: FunctionDecl, ?callerCtx: Context, ?callerInstr: Instruction) inline

  //----------------------------------------------------------------------------
  // "Output"/defined rules
  //
  // By convention, rules that begin with an underscore are internal
  // implementation details, and should not be accessed outside the component.
  //----------------------------------------------------------------------------

  // Interprocedural assignment due to func call
  .decl interp_assignment(?toCtx: Context, ?toVar: Variable, ?fromCtx: Context, ?fromValue: Operand)

  // Actual argument to formal parameter `assignment`
  interp_assignment(?calleeCtx, ?param, ?callerCtx, ?argument) :-
    callgraph_edge(?calleeCtx, ?callee, ?callerCtx, ?callerInstr),
    func_param_not_by_value(?callee, ?index, ?param),
    actual_arg(?callerInstr, ?index, ?argument).

  // Returned value to target variable `assignment`

  interp_assignment(?callerCtx, ?toVar, ?calleeCtx, ?retValue) :-
    callgraph_edge(?calleeCtx, ?callee, ?callerCtx, ?callerInstr),
    func_returns_value(?retValue, ?callee),
    instruction_assigns_to(?callerInstr, ?toVar).

  //------------------------------------------------------------------------------
  //  Variadic Functions
  //------------------------------------------------------------------------------

  // `va_arg` instruction
  //
  // TODO: model target-specific value `va_list` and calls to related
  // LLVM intrinsic funcs. Right now this may produce nothing

  .decl _va_arg_target(?toVar: Variable, ?argType: Type, ?callee: Function)

  _va_arg_target(?toVar, ?argType, ?callee) :-
    va_arg_instruction(?vAArgInstr),
    va_arg_instruction_type(?vAArgInstr, ?argType),
    instruction_assigns_to(?vAArgInstr, ?toVar),
    instruction_in_func(?vAArgInstr, ?callee).

  interp_assignment(?calleeCtx, ?toVar, ?callerCtx, ?argument) :-
    _va_arg_target(?toVar, ?argType, ?callee),
    func_ty(?callee, ?type),
    func_type_has_varargs(?type),
    func_type_nparams(?type, ?n),
    callgraph_edge(?calleeCtx, ?callee, ?callerCtx, ?callerInstr),
    actual_arg(?callerInstr, ?index, ?argument),
    ?index >= ?n,
    operand_has_type(?argument, ?argType).

}

//------------------------------------------------------------------------------
//  Pass-by-value Semantics
//------------------------------------------------------------------------------

// Interprocedural memcpy due to func call

.decl memcpy_pass_by_value(?toCtx: Context, ?toVar: Variable, ?fromCtx: Context, ?fromValue: Operand)

.decl func_by_value_param(?callee: Function, ?index: ArgumentIndex, ?param: Variable)

func_by_value_param(?callee, ?index, ?param) :-
   func_param(?callee, ?index, ?param),
   func_param_by_value(?callee, ?index).
